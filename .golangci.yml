# golangci-lint configuration file for New Teams Up
# https://golangci-lint.run/usage/configuration/

run:
  # Timeout for analysis, e.g. 30s, 5m.
  timeout: 5m

  # Exit code when at least one issue was found.
  issues-exit-code: 1

  # Include test files or not.
  tests: true

  # List of build tags, all linters use it.
  build-tags:
    - integration
    - e2e

  # Which dirs to skip: issues from them won't be reported.
  skip-dirs:
    - vendor
    - testdata
    - tmp
    - build
    - dist
    - node_modules
    - .git

  # Which files to skip: they will be analyzed, but issues from them won't be reported.
  skip-files:
    - ".*\\.pb\\.go$"
    - ".*_generated\\.go$"
    - "mock_.*\\.go$"

  # If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  modules-download-mode: readonly

  # Allow multiple parallel golangci-lint instances running.
  allow-parallel-runners: false

# Output configuration options
output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  format: colored-line-number

  # Print lines of code with issue.
  print-issued-lines: true

  # Print linter name in the end of issue text.
  print-linter-name: true

  # Make issues output unique by line.
  uniq-by-line: true

  # Add a prefix to the output file references.
  path-prefix: ""

  # Sort results by: filepath, line and column.
  sort-results: true

# Linters configuration
linters-settings:
  # Errcheck checks for unchecked errors
  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    check-type-assertions: true

    # Report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
    check-blank: false

    # List of functions to exclude from checking, where each entry is a single function to exclude.
    exclude-functions:
      - io/ioutil.ReadFile
      - io.Copy(*bytes.Buffer)
      - io.Copy(os.Stdout)

  # Govet reports suspicious constructs
  govet:
    # Report about shadowed variables
    check-shadowing: true

    # Settings per analyzer
    settings:
      printf:
        # Comma-separated list of print function names to check
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

    # Enable all analyzers
    enable:
      - atomicalign
      - deepequalerrors
      - fieldalignment
      - findcall
      - nilness
      - reflectvaluecompare
      - shadow
      - sortslice
      - timeformat
      - unusedwrite

  # Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
  revive:
    # Maximum number of open files at the same time.
    max-open-files: 2048

    # When set to false, ignores files with "GENERATED" header, similar to golint.
    ignore-generated-header: true

    # Sets the default severity to "warning".
    severity: warning

    # Enable multiple rules by name (in addition to default rules).
    rules:
      - name: indent-error-flow
        severity: warning
      - name: add-constant
        severity: warning
        arguments:
          - maxLitCount: "3"
            allowStrs: '""'
            allowInts: "0,1,2"
            allowFloats: "0.0,0.,1.0,1.,2.0,2."

  # Gocyclo calculates cyclomatic complexities of functions
  gocyclo:
    # Minimal code complexity to report.
    min-complexity: 15

  # Goconst finds repeated strings that could be replaced by a constant
  goconst:
    # Minimal length of string constant.
    min-len: 3

    # Minimal occurrences count to trigger.
    min-occurrences: 3

    # Ignore test files.
    ignore-tests: false

    # Look for existing constants matching the values.
    match-constant: true

    # Search also for duplicated numbers.
    numbers: false

    # Minimum value, only works with goconst.numbers
    min: 3

    # Maximum value, only works with goconst.numbers
    max: 3

    # Ignore when constant is not used as function argument.
    ignore-calls: true

  # Dupl tool for code clone detection
  dupl:
    # Tokens count to trigger issue.
    threshold: 150

  # Funlen checks the number of lines in a function
  funlen:
    lines: 100
    statements: 50

  # Goimports does everything that gofmt does and also fixes imports
  goimports:
    # Put imports beginning with prefix after 3rd-party packages.
    local-prefixes: github.com/your-org/new-teams-up

  # Gomnd detects magic numbers
  gomnd:
    # List of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.
    checks:
      - argument
      - case
      - condition
      - operation
      - return
      - assign
    # List of numbers to exclude from analysis.
    ignored-numbers:
      - '0'
      - '1'
      - '2'
      - '3'
      - '10'
      - '100'
      - '1000'
      - '1024'

  # Gomodguard allows to manage the list of allowed/blocked modules
  gomodguard:
    allowed:
      modules: []
      domains: []
    blocked:
      modules: []
      versions: []
      local_replace_directives: false

  # Gosec inspects source code for security problems
  gosec:
    # To select a subset of rules to run.
    includes:
      - G101 # Look for hard coded credentials
      - G102 # Bind to all interfaces
      - G103 # Audit the use of unsafe block
      - G104 # Audit errors not checked
      - G106 # Audit the use of ssh.InsecureIgnoreHostKey
      - G107 # Url provided to HTTP request as taint input
      - G108 # Profiling endpoint automatically exposed on /debug/pprof
      - G109 # Potential Integer overflow made by strconv.Atoi result conversion to int16/32
      - G110 # Potential DoS vulnerability via decompression bomb
      - G201 # SQL query construction using format string
      - G202 # SQL query construction using string concatenation
      - G203 # Use of unescaped data in HTML templates
      - G204 # Audit use of command execution
      - G301 # Poor file permissions used when creating a directory
      - G302 # Poor file permissions used with chmod
      - G303 # Creating tempfile using a predictable path
      - G304 # File path provided as taint input
      - G305 # File traversal when extracting zip/tar archive
      - G306 # Poor file permissions used when writing to a new file
      - G307 # Deferring a method which returns an error
      - G401 # Detect the usage of DES, RC4, MD5 or SHA1
      - G402 # Look for bad TLS connection settings
      - G403 # Ensure minimum RSA key length of 2048 bits
      - G404 # Insecure random number source (rand)
      - G501 # Import blocklist: crypto/md5
      - G502 # Import blocklist: crypto/des
      - G503 # Import blocklist: crypto/rc4
      - G504 # Import blocklist: net/http/cgi
      - G505 # Import blocklist: crypto/sha1
      - G601 # Implicit memory aliasing of items from a range statement

    # To specify the configuration of rules.
    config:
      G306: "0644"
      G101:
        pattern: "(?i)passwd|pass|password|pwd|secret|token|pw|apikey|bearer|cred"
        ignore_entropy: false
        entropy_threshold: "80.0"
        per_char_threshold: "3.0"
        truncate: "32"

  # Lll reports long lines
  lll:
    # Max line length, lines longer will be reported.
    line-length: 120

  # Maligned detects Go structs that would take less memory if their fields were sorted
  maligned:
    # Print struct with more effective memory layout or not.
    suggest-new: true

  # Misspell finds commonly misspelled English words in comments
  misspell:
    # Correct spellings using locale preferences for US or UK.
    locale: US
    ignore-words:
      - someword

  # Nakedret finds naked returns in functions greater than a specified function length
  nakedret:
    # Make an issue if func has more lines of code than this setting, and it has naked returns.
    max-func-lines: 30

  # Prealloc finds slice declarations that could potentially be pre-allocated
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default

  # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
  staticcheck:
    # Select the Go version to target.
    go: "1.21"
    # https://staticcheck.io/docs/options#checks
    checks: ["all"]

  # Stylecheck is a replacement for golint
  stylecheck:
    # Select the Go version to target.
    go: "1.21"
    # https://staticcheck.io/docs/options#checks
    checks: ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022"]
    # https://staticcheck.io/docs/options#dot_import_whitelist
    dot-import-whitelist:
      - fmt
    # https://staticcheck.io/docs/options#initialisms
    initialisms: ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS", "SIP", "RTP", "AMQP", "DB", "TS"]
    # https://staticcheck.io/docs/options#http_status_code_whitelist
    http-status-code-whitelist: ["200", "400", "404", "500"]

  # Unparam reports unused function parameters
  unparam:
    # Inspect exported functions.
    check-exported: false

  # Unused checks Go code for unused constants, variables, functions and types
  unused:
    # Select the Go version to target.
    go: "1.21"

  # Whitespace tool for detection of leading and trailing whitespace
  whitespace:
    multi-if: false   # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature

  # Wsl tool for detection of leading and trailing whitespace
  wsl:
    # See https://github.com/bombsimon/wsl/blob/master/doc/configuration.md for documentation of available settings.
    # These are the defaults for `golangci-lint`.
    strict-append: true
    allow-assign-and-call: true
    allow-assign-and-anything: false
    allow-multiline-assign: true
    force-case-trailing-whitespace: 0
    # Allow declarations (var) to be cuddled.
    allow-cuddle-declarations: false
    # Allow trailing comments in ending of blocks
    allow-trailing-comment: false
    # Force newlines in end of case at this limit (0 = never).
    force-case-trailing-whitespace: 0
    # Force cuddling of err checks with err var assignment
    force-err-cuddling: false
    # Allow leading comments to be separated with empty liens
    allow-separated-leading-comment: false

linters:
  # Disable all linters as default is true.
  disable-all: true

  # Enable specific linters
  enable:
    # Default linters
    - errcheck      # Errcheck is a program for checking for unchecked errors in go programs
    - gosimple      # Linter for Go source code that specializes in simplifying a code
    - govet         # Vet examines Go source code and reports suspicious constructs
    - ineffassign   # Detects when assignments to existing variables are not used
    - staticcheck   # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - typecheck     # Like the front-end of a Go compiler, parses and type-checks Go code
    - unused        # Checks Go code for unused constants, variables, functions and types

    # Additional linters
    - asciicheck    # Simple linter to check that your code does not contain non-ASCII identifiers
    - bidichk       # Checks for dangerous unicode character sequences
    - bodyclose     # checks whether HTTP response body is closed successfully
    - contextcheck  # check the function whether use a non-inherited context
    - cyclop        # checks function and package cyclomatic complexity
    - dupl          # Tool for code clone detection
    - durationcheck # check for two durations multiplied together
    - errname       # Checks that sentinel errors are prefixed with the `Err` and error types are suffixed with the `Error`.
    - errorlint     # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - execinquery   # execinquery is a linter about query string checker in Query function which reads your Go src files and warning it finds
    - exhaustive    # check exhaustiveness of enum switch statements
    - exportloopref # checks for pointers to enclosing loop variables
    - forbidigo     # Forbids identifiers
    - funlen        # Tool for detection of long functions
    - gochecknoglobals # check that no global variables exist
    - gochecknoinits   # Checks that no init functions are present in Go code
    - gocognit      # Computes and checks the cognitive complexity of functions
    - goconst       # Finds repeated strings that could be replaced by a constant
    - gocritic      # Provides diagnostics that check for bugs, performance and style issues.
    - gocyclo       # Computes and checks the cyclomatic complexity of functions
    - godot         # Check if comments end in a period
    - goimports     # In addition to fixing imports, goimports also formats your code in the same style as gofmt.
    - gomnd         # An analyzer to detect magic numbers.
    - gomodguard    # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.
    - goprintffuncname # Checks that printf-like functions are named with `f` at the end
    - gosec         # Inspects source code for security problems
    - grouper       # An analyzer to analyze expression groups.
    - importas      # Enforces consistent import aliases
    - lll           # Reports long lines
    - loggercheck   # Checks key value pairs for common logger libraries (kitlog,klog,logr,zap).
    - makezero      # Finds slice declarations with non-zero initial length
    - misspell      # Finds commonly misspelled English words in comments
    - nakedret      # Finds naked returns in functions greater than a specified function length
    - nestif        # Reports deeply nested if statements
    - nilerr        # Finds the code that returns nil even if it checks that the error is not nil.
    - nilnil        # Checks that there is no simultaneous return of `nil` error and an invalid value.
    - noctx         # noctx finds sending http request without context.Context
    - nolintlint    # Reports ill-formed or insufficient nolint directives
    - nonamedreturns # Reports all named returns
    - nosprintfhostport # Checks for misuse of Sprintf to construct a host with port in a URL.
    - predeclared   # find code that shadows one of Go's predeclared identifiers
    - promlinter    # Check Prometheus metrics naming via promlint
    - reassign      # Checks that package variables are not reassigned
    - revive        # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    - rowserrcheck  # checks whether Err of rows is checked successfully
    - sqlclosecheck # Checks that sql.Rows and sql.Stmt are closed.
    - stylecheck    # Stylecheck is a replacement for golint
    - tenv          # tenv is analyzer that detects using os.Setenv instead of t.Setenv since Go1.17
    - testpackage   # linter that makes you use a separate _test package
    - thelper       # thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    - tparallel     # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert     # Remove unnecessary type conversions
    - unparam       # Reports unused function parameters
    - usestdlibvars # A linter that detect the possibility to use variables/constants from the Go standard library.
    - wastedassign  # wastedassign finds wasted assignment statements.
    - whitespace    # Tool for detection of leading and trailing whitespace

  # Don't enable these linters
  # - containedctx  # containedctx is a linter that detects struct contained context.Context field
  # - depguard      # Go linter that checks if package imports are in a list of acceptable packages
  # - dogsled       # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
  # - errchkjson    # Checks types passed to the json encoding functions. Reports unsupported types and optionally reports occasions, where the check for the returned error can be omitted.
  # - forcetypeassert # finds forced type assertions
  # - goerr113      # Golang linter to check the errors handling expressions
  # - gofmt         # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
  # - gofumpt       # Gofumpt checks whether code was gofumpt-ed.
  # - goheader      # Checks is file header matches to pattern
  # - golint        # Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
  # - gomoddirectives # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.
  # - interfacebloat # A linter that checks the number of methods inside an interface.
  # - ireturn       # Accept Interfaces, Return Concrete Types
  # - maligned      # Tool to detect Go structs that would take less memory if their fields were sorted
  # - maintidx      # maintidx measures the maintainability index of each function.
  # - nlreturn      # nlreturn checks for a new line before return and branch statements to increase code clarity
  # - paralleltest  # paralleltest detects missing usage of t.Parallel() method in your Go test
  # - prealloc      # Finds slice declarations that could potentially be pre-allocated
  # - tagliatelle   # Checks the struct tags.
  # - testableexamples # linter checks if examples are testable (have an expected output)
  # - varnamelen    # checks that the length of a variable's name matches its scope
  # - wrapcheck     # Checks that errors returned from external packages are wrapped
  # - wsl           # Whitespace Linter - Forces you to use empty lines!

issues:
  # List of regexps of issue texts to exclude.
  exclude:
    # Exclude some linters from running on tests files.
    - "G404: Use of weak random number generator" # By default, gosec excludes _test.go files, but some projects may want to include them
    - "G101: Potential hardcoded credentials" # Often triggered by test data

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gomnd
        - goconst
        - funlen
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - lll

    # Exclude some linters from running on generated files.
    - path: ".*\\.pb\\.go$"
      linters:
        - lll
        - errcheck

    # Exclude some linters from running on mock files.
    - path: "mock_.*\\.go$"
      linters:
        - gomnd
        - goconst
        - funlen
        - gocyclo
        - errcheck
        - dupl
        - gosec

    # Exclude some staticcheck messages
    - linters:
        - staticcheck
      text: "SA9003:"

    # Exclude some gosec messages
    - linters:
        - gosec
      text: "G304: Potential file inclusion via variable"

    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all excluded by default patterns
  # execute `golangci-lint run --help`.
  exclude-use-default: false

  # If set to true exclude and exclude-rules regular expressions become case sensitive.
  exclude-case-sensitive: false

  # The list of ids of default excludes to include or disable.
  include:
    - EXC0002 # disable excluding of issues about comments from golint
    - EXC0003 # disable excluding of issues about comments from revive
    - EXC0004 # disable excluding of issues about comments from gocritic
    - EXC0005 # disable excluding of issues about comments from staticcheck
    - EXC0011 # disable excluding of issues about missing package comments from stylecheck
    - EXC0012 # disable excluding of issues about exported without comments from revive
    - EXC0013 # disable excluding of issues about package comments from revive
    - EXC0014 # disable excluding of issues about comments from gocritic
    - EXC0015 # disable excluding of issues about comments from revive

  # Maximum issues count per one linter.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, e.g. uncommitted changes in a git repo.
  new: false

  # Show only new issues created after git revision `REV`.
  new-from-rev: ""

  # Show only new issues created in git patch with set file path.
  new-from-patch: ""

  # Fix found issues (if it's supported by the linter).
  fix: false

severity:
  # Set the default severity for issues.
  default-severity: error

  # Set the default severity for issues.
  case-sensitive: false

  # Default value is empty list.
  rules:
    - linters:
        - dupl
      severity: info
